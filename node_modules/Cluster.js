var Cluster = function (data) {
	this.data = data;
};

Cluster.prototype.data = [];

Cluster.prototype.clusters = [];

Cluster.prototype.iterate = function (data, centroids) {
	var item;
	var distances = [];
	var min, index = -1;
	var newCentroids = [];

	for(var k = 0; k < centroids.length; k ++) {
		newCentroids[k] = [0, 0];
	}

	for(var i = 0; i < data.length; i ++) {
		min = Number.MIN_VALUE;
		index = -1;
		item = data[i];

		for(var j = 0; j < centroids.length; j ++) {
			if(min > this.getDistance(centroids[j], item)) {
				index = j;
				min = this.getDistance(centroids[j], item);
			}
		} // end of for - j 
		this.clusters[index].points.push(item);
		newCentroids[index][0] += item.latitude;
		newCentroids[index][1] += item.longitude;
		
	} // end of for - i

	for(var k = 0; k < centroids.length; k ++) {
		newCentroids[k][0] = newCentroids[k][0] / this.clusters[k].points.length;
		newCentroids[k][1] = newCentroids[k][1] / this.clusters[k].points.length;
	}
	return newCentroids;
}

Cluster.prototype.init = function (centroids) {
	this.clusters = [];
	for(var i = 0; i < centroids.length; i ++) {
		this.clusters.push({centroid: centroids[i], points: [] });
	}
}

Cluster.prototype.isChange = function (lastCentroids, currentCentroids) {
	for(var i = 0; i < lastCentroids.length; i ++) {
		if(getDistance(lastCentroids[i], currentCentroids[i]) != 0) {
			return true;
		}
	}
	return false;
}

Cluster.prototype.getDistance = function (centroid, item) {
	if(Object.prototype.toString.call(item).split(' ')[1].split(']')[0] === 'Object') {
		var from = turf.point([centroid[0], centroid[1]]);
		var to = turf.point([item.longitude, item.latitude]);
		var distance = turf.distance(from, to, 'kilometers') * 1000;
		return distance;
	}
	var from = turf.point([centroid[0], centroid[1]]);
	var to = turf.point([item[0], item[1]]);
	var distance = turf.distance(from, to, 'kilometers') * 1000;
	return distance;
}

Cluster.prototype.k_means = function (centroids) {
	var isIterate = true;
	var currentCentroids = centroids;
	var lastCentroids = currentCentroids;
	while(isIterate) {
		this.init(currentCentroids);
		currentCentroids = this.iterate(this.data, lastCentroids);
		if(!this.isChange(lastCentroids, currentCentroids)) {
			isIterate = false;
		}
		lastCentroids = currentCentroids;
	}
	return this.clusters;
}